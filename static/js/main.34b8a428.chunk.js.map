{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","api.ts","components/Loader/Loader.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialParams","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppSelector","useDispatch","useSelector","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","className","TodoList","useState","isError","setIsError","isLoading","setIsLoading","dispatch","useEffect","todosList","todosAction","catch","finally","visibleTodos","useMemo","newTodos","title","toLowerCase","includes","completed","length","map","id","classNames","onClick","currentTodoAction","OPTIONS","TodoFilter","onSubmit","e","preventDefault","onChange","event","target","value","option","placeholder","style","pointerEvents","TodoModal","user","setUser","userId","href","email","name","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.34b8a428.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nlet stateTodo = null;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      stateTodo = action.payload;\n\n      return stateTodo;\n\n    case 'currentTodo/REMOVE':\n      stateTodo = null;\n\n      return stateTodo;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype QueryAction = { type: 'add/query', payload: string };\ntype StatusAction = { type: 'add/status', payload: string };\ntype ClearAction = { type: 'add/clear' };\n\ntype Actions = QueryAction | StatusAction | ClearAction;\n\nconst addQuery = (query: string) => ({ type: 'add/query', payload: query });\nconst addStatus = (status: Status) => ({ type: 'add/status', payload: status });\nconst clearQuery = () => ({ type: 'add/clear' });\n\nexport const actions = { addQuery, addStatus, clearQuery };\n\ntype Param = {\n  query: string,\n  status: Status,\n};\n\nconst initialParams: Param = { query: '', status: 'all' };\n\nconst filterReducer = (\n  state: Param = initialParams,\n  action: Actions,\n): Param => {\n  switch (action.type) {\n    case 'add/query':\n      return { ...state, query: action.payload };\n    case 'add/status':\n      return { ...state, status: action.payload as Status };\n    case 'add/clear':\n      return { ...state, query: '' };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype AddTodos = { type: 'todos/ADD', payload: Todo[] };\n\nconst addTodos = (todos: Todo[]): AddTodos => (\n  { type: 'todos/ADD', payload: todos }\n);\n\nexport const actions = { addTodos };\n\nconst todosReducer = (todos: Todo[] = [], action: AddTodos): Todo[] => {\n  if (action.type === 'todos/ADD') {\n    return action.payload;\n  }\n\n  return todos;\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable no-lone-blocks */\n/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport classNames from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { getTodos } from '../../api';\nimport { actions as todosAction } from '../../features/todos';\nimport { actions as currentTodoAction } from '../../features/currentTodo';\nimport { Loader } from '../Loader';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const { query, status } = useAppSelector(state => state.filter);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setIsError(false);\n    setIsLoading(true);\n\n    getTodos()\n      .then((todosList) => dispatch(todosAction.addTodos(todosList)))\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    const newTodos = query\n      ? [...todos].filter(todo => todo.title.toLowerCase().includes(query))\n      : [...todos];\n\n    switch (status) {\n      case 'active':\n        return newTodos.filter(todo => !todo.completed);\n\n      case 'completed':\n        return newTodos.filter(todo => todo.completed);\n\n      case 'all':\n        return newTodos;\n\n      default:\n        return newTodos;\n    }\n  }, [query, status, todos]);\n\n  return (\n    <>\n      {!isLoading && !isError && visibleTodos.length === 0 && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      {isLoading && !isError && <Loader />}\n\n      {!isLoading && !isError && visibleTodos.length > 0 && (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {visibleTodos.map(todo => (\n              <tr key={todo.id} data-cy=\"todo\">\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={classNames(\n                      { 'has-text-danger': !todo.completed },\n                      { 'has-text-success': todo.completed },\n                    )}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => dispatch(currentTodoAction.setTodo(todo))}\n                  >\n                    <span className=\"icon\">\n                      <i className={todo.id === currentTodo?.id\n                        ? 'far fa-eye-slash'\n                        : 'far fa-eye'}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nconst OPTIONS = ['All', 'Active', 'Completed'];\n\nexport const TodoFilter: React.FC = () => {\n  const { query } = useAppSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(actions.addStatus(event.target.value as Status));\n  };\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(actions.addQuery(event.target.value.toLowerCase()));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={(e) => e.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleSelect}\n          >\n            {OPTIONS.map(option => (\n              <option\n                value={option.toLowerCase()}\n                key={option}\n              >\n                {option}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          value={query}\n          placeholder=\"Search...\"\n          onChange={handleInput}\n        />\n\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              aria-label=\"clear input\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(actions.clearQuery())}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { useAppSelector } from '../../app/hooks';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { actions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useDispatch();\n  const [user, setUser] = useState<User | null>(null);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsError(false);\n    setIsLoading(true);\n\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then(setUser)\n        .catch(() => setIsError(true))\n        .finally(() => setIsLoading(false));\n    }\n  }, [currentTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading && !isError && <Loader />}\n\n      {!isLoading && !isError && user && currentTodo && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              aria-label=\"close\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(actions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p\n              className=\"block\"\n              data-cy=\"modal-title\"\n            >\n              {currentTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {!currentTodo.completed && (\n                <strong className=\"has-text-danger\">\n                  Planned\n                </strong>\n              )}\n\n              {currentTodo.completed && (\n                <strong className=\"has-text-success\">\n                  Done\n                </strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { useAppSelector } from './app/hooks';\n\nexport const App: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              <TodoList />\n            </div>\n          </div>\n        </div>\n      </div>\n      {currentTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\nimport './App.scss';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}